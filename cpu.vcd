$date
	Fri Aug 22 21:22:50 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module jpeb $end
$var wire 32 ! ret_val [31:0] $end
$var wire 1 " mem_write_en $end
$var wire 32 # mem_write_data [31:0] $end
$var wire 32 $ mem_write_addr [31:0] $end
$var wire 32 % mem_read1_data [31:0] $end
$var wire 32 & mem_read1_addr [31:0] $end
$var wire 32 ' mem_read0_data [31:0] $end
$var wire 32 ( mem_read0_addr [31:0] $end
$var wire 4 ) flags [3:0] $end
$var wire 32 * cpu_pc [31:0] $end
$var wire 1 + clk $end
$var reg 1 , reset $end
$scope module c0 $end
$var wire 1 + clk $end
$var reg 1 - theClock $end
$upscope $end
$scope module cpu $end
$var wire 1 + clk $end
$var wire 32 . curr_pc [31:0] $end
$var wire 1 / flush $end
$var wire 32 0 mem_out_0 [31:0] $end
$var wire 32 1 mem_out_1 [31:0] $end
$var wire 32 2 mem_read0_addr [31:0] $end
$var wire 32 3 mem_read1_addr [31:0] $end
$var wire 32 4 mem_write_addr [31:0] $end
$var wire 32 5 mem_write_data [31:0] $end
$var wire 1 " mem_write_en $end
$var wire 5 6 wb_tgt_out_2 [4:0] $end
$var wire 5 7 wb_tgt_out_1 [4:0] $end
$var wire 32 8 wb_result_out_2 [31:0] $end
$var wire 32 9 wb_result_out_1 [31:0] $end
$var wire 32 : store_data [31:0] $end
$var wire 1 ; stall $end
$var wire 32 < ret_val [31:0] $end
$var wire 32 = reg_write_data_2 [31:0] $end
$var wire 32 > reg_write_data_1 [31:0] $end
$var wire 1 ? reg_we_2 $end
$var wire 1 @ reg_we_1 $end
$var wire 1 A mem_we $end
$var wire 5 B mem_tgt_out_2 [4:0] $end
$var wire 5 C mem_tgt_out_1 [4:0] $end
$var wire 32 D mem_result_out_2 [31:0] $end
$var wire 32 E mem_result_out_1 [31:0] $end
$var wire 32 F mem_read1_data [31:0] $end
$var wire 32 G mem_read0_data [31:0] $end
$var wire 5 H mem_opcode_out [4:0] $end
$var wire 1 I mem_is_store_out $end
$var wire 1 J mem_is_load_out $end
$var wire 1 K mem_halt $end
$var wire 1 L mem_bubble_out $end
$var wire 4 M flags [3:0] $end
$var wire 32 N fetch_b_pc_out [31:0] $end
$var wire 1 O fetch_b_bubble_out $end
$var wire 32 P fetch_addr [31:0] $end
$var wire 32 Q fetch_a_pc_out [31:0] $end
$var wire 1 R fetch_a_bubble_out $end
$var wire 5 S exec_tgt_out_2 [4:0] $end
$var wire 5 T exec_tgt_out_1 [4:0] $end
$var wire 32 U exec_result_out_2 [31:0] $end
$var wire 32 V exec_result_out_1 [31:0] $end
$var wire 5 W exec_opcode_out [4:0] $end
$var wire 1 X exec_is_store_out $end
$var wire 1 Y exec_is_load_out $end
$var wire 1 Z exec_halt_out $end
$var wire 1 [ exec_bubble_out $end
$var wire 5 \ decode_tgt_out_2 [4:0] $end
$var wire 5 ] decode_tgt_out_1 [4:0] $end
$var wire 5 ^ decode_s_2_out [4:0] $end
$var wire 5 _ decode_s_1_out [4:0] $end
$var wire 32 ` decode_pc_out [31:0] $end
$var wire 5 a decode_opcode_out [4:0] $end
$var wire 32 b decode_op2_out [31:0] $end
$var wire 32 c decode_op1_out [31:0] $end
$var wire 1 d decode_is_store_out $end
$var wire 1 e decode_is_post_inc_out $end
$var wire 1 f decode_is_load_out $end
$var wire 1 g decode_is_branch_out $end
$var wire 32 h decode_imm_out [31:0] $end
$var wire 1 i decode_halt_out $end
$var wire 1 j decode_bubble_out $end
$var wire 5 k decode_branch_code_out [4:0] $end
$var wire 5 l decode_alu_op_out [4:0] $end
$var wire 32 m branch_tgt [31:0] $end
$var wire 1 n branch $end
$var wire 32 o addr [31:0] $end
$var reg 1 p halt $end
$var reg 1 q mem_ren $end
$scope module ctr $end
$var wire 1 + clk $end
$var wire 1 p isHalt $end
$var wire 32 r ret_val [31:0] $end
$var reg 32 s count [31:0] $end
$upscope $end
$scope module decode $end
$var wire 1 + clk $end
$var wire 1 / flush $end
$var wire 1 p halt $end
$var wire 1 t is_absolute_mem $end
$var wire 1 u is_arithmetic $end
$var wire 1 v is_bitwise $end
$var wire 1 w is_branch $end
$var wire 1 x is_load $end
$var wire 1 y is_mem $end
$var wire 1 z is_shift $end
$var wire 1 { is_store $end
$var wire 32 | mem_out_0 [31:0] $end
$var wire 32 } write_data_2 [31:0] $end
$var wire 32 ~ write_data_1 [31:0] $end
$var wire 1 ? we2 $end
$var wire 1 @ we1 $end
$var wire 5 !" target_2 [4:0] $end
$var wire 5 "" target_1 [4:0] $end
$var wire 1 ; stall $end
$var wire 5 #" s_2 [4:0] $end
$var wire 5 $" s_1 [4:0] $end
$var wire 32 %" ret_val [31:0] $end
$var wire 5 &" r_c [4:0] $end
$var wire 5 '" r_b [4:0] $end
$var wire 5 (" r_a [4:0] $end
$var wire 32 )" pc_in [31:0] $end
$var wire 5 *" opcode [4:0] $end
$var wire 2 +" mem_shift [1:0] $end
$var wire 1 ," load_bit $end
$var wire 32 -" instr_in [31:0] $end
$var wire 2 ." increment_type [1:0] $end
$var wire 32 /" imm [31:0] $end
$var wire 32 0" d_2 [31:0] $end
$var wire 32 1" d_1 [31:0] $end
$var wire 1 O bubble_in $end
$var wire 5 2" branch_code [4:0] $end
$var wire 5 3" alu_shift [4:0] $end
$var wire 5 4" alu_op [4:0] $end
$var reg 5 5" alu_op_out [4:0] $end
$var reg 5 6" branch_code_out [4:0] $end
$var reg 1 j bubble_out $end
$var reg 1 i halt_out $end
$var reg 32 7" imm_out [31:0] $end
$var reg 32 8" instr_buf [31:0] $end
$var reg 1 g is_branch_out $end
$var reg 1 f is_load_out $end
$var reg 1 e is_post_inc_out $end
$var reg 1 d is_store_out $end
$var reg 5 9" opcode_out [4:0] $end
$var reg 32 :" pc_out [31:0] $end
$var reg 5 ;" s_1_out [4:0] $end
$var reg 5 <" s_2_out [4:0] $end
$var reg 5 =" tgt_out_1 [4:0] $end
$var reg 5 >" tgt_out_2 [4:0] $end
$var reg 1 ?" was_stall $end
$var reg 1 @" was_was_stall $end
$scope module regfile $end
$var wire 1 + clk $end
$var wire 5 A" raddr0 [4:0] $end
$var wire 5 B" raddr1 [4:0] $end
$var wire 32 C" ret_val [31:0] $end
$var wire 1 ? wen1 $end
$var wire 1 @ wen0 $end
$var wire 32 D" wdata1 [31:0] $end
$var wire 32 E" wdata0 [31:0] $end
$var wire 5 F" waddr1 [4:0] $end
$var wire 5 G" waddr0 [4:0] $end
$var reg 32 H" rdata0 [31:0] $end
$var reg 32 I" rdata1 [31:0] $end
$upscope $end
$upscope $end
$scope module execute $end
$var wire 5 J" alu_op [4:0] $end
$var wire 1 n branch $end
$var wire 5 K" branch_code [4:0] $end
$var wire 1 j bubble_in $end
$var wire 1 + clk $end
$var wire 32 L" decode_pc_out [31:0] $end
$var wire 1 p halt $end
$var wire 1 i halt_in $end
$var wire 32 M" imm [31:0] $end
$var wire 1 g is_branch $end
$var wire 1 f is_load $end
$var wire 1 e is_post_inc $end
$var wire 1 d is_store $end
$var wire 32 N" lhs [31:0] $end
$var wire 1 O" mux_imm $end
$var wire 5 P" opcode [4:0] $end
$var wire 32 Q" reg_out_1 [31:0] $end
$var wire 32 R" reg_out_2 [31:0] $end
$var wire 5 S" s_1 [4:0] $end
$var wire 5 T" s_2 [4:0] $end
$var wire 1 ; stall $end
$var wire 5 U" tgt_1 [4:0] $end
$var wire 5 V" tgt_2 [4:0] $end
$var wire 1 A we $end
$var wire 5 W" wb_tgt_2 [4:0] $end
$var wire 5 X" wb_tgt_1 [4:0] $end
$var wire 32 Y" wb_result_out_2 [31:0] $end
$var wire 32 Z" wb_result_out_1 [31:0] $end
$var wire 1 [" taken $end
$var wire 32 \" store_data [31:0] $end
$var wire 32 ]" rhs [31:0] $end
$var wire 32 ^" op2 [31:0] $end
$var wire 32 _" op1 [31:0] $end
$var wire 5 `" mem_tgt_2 [4:0] $end
$var wire 5 a" mem_tgt_1 [4:0] $end
$var wire 32 b" mem_result_out_2 [31:0] $end
$var wire 32 c" mem_result_out_1 [31:0] $end
$var wire 5 d" mem_opcode_out [4:0] $end
$var wire 1 L mem_bubble $end
$var wire 1 J is_load_mem $end
$var wire 1 K halt_in_wb $end
$var wire 4 e" flags [3:0] $end
$var wire 32 f" branch_tgt [31:0] $end
$var wire 32 g" alu_rslt [31:0] $end
$var wire 32 h" addr [31:0] $end
$var reg 1 [ bubble_out $end
$var reg 1 Z halt_out $end
$var reg 1 Y is_load_out $end
$var reg 1 X is_store_out $end
$var reg 5 i" opcode_out [4:0] $end
$var reg 32 j" result_1 [31:0] $end
$var reg 32 k" result_2 [31:0] $end
$var reg 5 l" tgt_out_1 [4:0] $end
$var reg 5 m" tgt_out_2 [4:0] $end
$scope module ALU $end
$var wire 5 n" alu_op [4:0] $end
$var wire 1 j bubble $end
$var wire 1 + clk $end
$var wire 1 o" o $end
$var wire 5 p" op [4:0] $end
$var wire 32 q" s_1 [31:0] $end
$var wire 32 r" s_2 [31:0] $end
$var wire 1 s" zero $end
$var wire 33 t" sum [32:0] $end
$var wire 32 u" shifted [31:0] $end
$var wire 32 v" s_1_subb [31:0] $end
$var wire 32 w" s_1_sub [31:0] $end
$var wire 32 x" s_1_for_o [31:0] $end
$var wire 1 y" s $end
$var wire 32 z" result [31:0] $end
$var wire 33 {" diff [32:0] $end
$var wire 33 |" carry_sum [32:0] $end
$var wire 33 }" carry_diff [32:0] $end
$var wire 1 ~" c $end
$var reg 4 !# flags [3:0] $end
$upscope $end
$upscope $end
$scope module fetch_a $end
$var wire 1 n branch $end
$var wire 32 "# branch_tgt [31:0] $end
$var wire 1 + clk $end
$var wire 1 / flush $end
$var wire 1 ## stall $end
$var wire 32 $# fetch_addr [31:0] $end
$var reg 1 R bubble_out $end
$var reg 32 %# pc [31:0] $end
$var reg 32 &# pc_out [31:0] $end
$upscope $end
$scope module fetch_b $end
$var wire 1 R bubble_in $end
$var wire 1 + clk $end
$var wire 1 / flush $end
$var wire 32 '# pc_in [31:0] $end
$var wire 1 (# stall $end
$var reg 1 O bubble_out $end
$var reg 32 )# pc_out [31:0] $end
$upscope $end
$scope module memory $end
$var wire 1 [ bubble_in $end
$var wire 1 + clk $end
$var wire 1 p halt $end
$var wire 1 Z halt_in $end
$var wire 1 Y is_load $end
$var wire 1 X is_store $end
$var wire 5 *# opcode_in [4:0] $end
$var wire 32 +# result_in_1 [31:0] $end
$var wire 32 ,# result_in_2 [31:0] $end
$var wire 5 -# tgt_in_1 [4:0] $end
$var wire 5 .# tgt_in_2 [4:0] $end
$var reg 1 L bubble_out $end
$var reg 1 K halt_out $end
$var reg 1 J is_load_out $end
$var reg 1 I is_store_out $end
$var reg 5 /# opcode_out [4:0] $end
$var reg 32 0# result_out_1 [31:0] $end
$var reg 32 1# result_out_2 [31:0] $end
$var reg 5 2# tgt_out_1 [4:0] $end
$var reg 5 3# tgt_out_2 [4:0] $end
$upscope $end
$scope module writeback $end
$var wire 32 4# alu_result_1 [31:0] $end
$var wire 32 5# alu_result_2 [31:0] $end
$var wire 1 L bubble_in $end
$var wire 1 + clk $end
$var wire 1 p halt $end
$var wire 1 J is_load $end
$var wire 1 I is_store $end
$var wire 32 6# mem_result [31:0] $end
$var wire 5 7# opcode [4:0] $end
$var wire 32 8# result_out_2 [31:0] $end
$var wire 5 9# tgt_in_1 [4:0] $end
$var wire 5 :# tgt_in_2 [4:0] $end
$var wire 1 @ we1 $end
$var wire 1 ? we2 $end
$var wire 32 ;# result_out_1 [31:0] $end
$var wire 32 <# masked_mem_result [31:0] $end
$var reg 32 =# wb_result_out_1 [31:0] $end
$var reg 32 ># wb_result_out_2 [31:0] $end
$var reg 5 ?# wb_tgt_out_1 [4:0] $end
$var reg 5 @# wb_tgt_out_2 [4:0] $end
$upscope $end
$upscope $end
$scope module mem $end
$var wire 1 + clk $end
$var wire 32 A# raddr0 [31:0] $end
$var wire 32 B# raddr1 [31:0] $end
$var wire 32 C# waddr [31:0] $end
$var wire 32 D# wdata [31:0] $end
$var wire 1 " wen $end
$var reg 32 E# data0_out [31:0] $end
$var reg 32 F# data1_out [31:0] $end
$var reg 32 G# rdata0 [31:0] $end
$var reg 32 H# rdata1 [31:0] $end
$var reg 1 I# wen_buf $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xI#
bx H#
bx G#
bx F#
bx E#
bx D#
bx C#
bx B#
b0 A#
b0 @#
b0 ?#
bx >#
bx =#
bx <#
bx ;#
b0 :#
b0 9#
bx 8#
bx 7#
bx 6#
bx 5#
bx 4#
b0 3#
b0 2#
bx 1#
bx 0#
bx /#
b0 .#
b0 -#
bx ,#
bx +#
bx *#
bx )#
0(#
bx '#
bx &#
b0 %#
b0 $#
0##
bx "#
b0 !#
x~"
bx }"
bx |"
bx {"
bx z"
xy"
bx x"
bx w"
bx v"
bx u"
bx t"
xs"
bx r"
bx q"
bx p"
xo"
bx n"
b0 m"
b0 l"
bx k"
bx j"
bx i"
bx h"
bx g"
bx f"
b0 e"
bx d"
bx c"
bx b"
b0 a"
b0 `"
bx _"
bx ^"
bx ]"
bx \"
x["
bx Z"
bx Y"
b0 X"
b0 W"
b0 V"
b0 U"
bx T"
bx S"
bx R"
bx Q"
bx P"
xO"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
b0 G"
b0 F"
bx E"
bx D"
bx C"
bx B"
bx A"
x@"
x?"
b0 >"
b0 ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx000 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
x,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
b0 ""
b0 !"
bx ~
bx }
bx |
x{
xz
xy
xx
xw
xv
xu
xt
b0 s
bx r
1q
0p
bx o
0n
bx m
bx l
bx k
1j
xi
bx h
xg
xf
xe
xd
bx c
bx b
bx a
bx `
bx _
bx ^
b0 ]
b0 \
1[
xZ
xY
xX
bx W
bx V
bx U
b0 T
b0 S
1R
bx Q
b0 P
1O
bx N
b0 M
1L
0K
xJ
xI
bx H
bx G
bx F
bx E
bx D
b0 C
b0 B
0A
0@
0?
bx >
bx =
bx <
0;
bx :
bx 9
bx 8
b0 7
b0 6
bx 5
bx 4
bx 3
b0 2
bx 1
bx 0
0/
bx .
1-
0,
1+
bx *
b0 )
b0 (
bx '
bx &
bx %
bx $
bx #
0"
bx !
$end
#500
0+
0-
#1000
b100 (
b100 2
b100 A#
b100 P
b100 $#
b1000110000001110000000001100 E#
0I#
b1 s
b0 Q
b0 &#
b0 '#
0R
b100 %#
0?"
0i
0Z
1+
1-
#1500
0+
0-
#2000
b1100 /"
0,"
0x
0{
0t
b0 $"
b0 A"
0v
0z
1u
b0 #"
b0 B"
0y
0w
b11 ("
b0 '"
b1110 4"
b1 *"
b0 3"
b1100 &"
b11 2"
b11 ."
b10 +"
b1000110000001110000000001100 -"
b1000 (
b1000 2
b1000 A#
b1000 P
b1000 $#
0@"
b0 N
b0 )"
b0 )#
0O
b100 Q
b100 &#
b100 '#
b1000 %#
b10 s
b1000110000001110000000001100 0
b1000110000001110000000001100 |
b1000110000001110000000001100 '
b1000110000001110000000001100 G
b1000110000001110000000001100 G#
b1111000000000000000000000000000 E#
1+
1-
#2500
0+
0-
#3000
0o"
0y"
0s"
b1100 g"
b1100 z"
0~"
b0 /"
1v
0u
b0 x"
b0 ("
b0 4"
b1100 {"
b0 w"
b100000000000000000000000000001011 }"
b11111111111111111111111111111111 v"
b1100 t"
b100000000000000000000000000001100 |"
b0 u"
b1100 ]"
b1100 r"
b0 $
b0 4
b0 C#
b0 &
b0 3
b0 B#
b0 o
b0 h"
b1111 *"
b0 &"
b0 2"
b0 ."
b0 +"
b1100 (
b1100 2
b1100 A#
b1100 P
b1100 $#
0["
b0 ^"
b0 N"
b0 q"
b0 _"
1O"
b0 #
b0 5
b0 D#
b0 :
b0 \"
b1111000000000000000000000000000 -"
b100 m
b100 f"
b100 "#
b1111000000000000000000000000000 0
b1111000000000000000000000000000 |
b1111000000000000000000000000000 '
b1111000000000000000000000000000 G
b1111000000000000000000000000000 G#
bx E#
b11 s
b1000 Q
b1000 &#
b1000 '#
b1100 %#
b100 N
b100 )"
b100 )#
b0 b
b0 0"
b0 I"
b0 R"
b0 c
b0 1"
b0 H"
b0 Q"
b1000110000001110000000001100 8"
0e
0g
0d
0f
b0 *
b0 .
b0 `
b0 :"
b0 L"
0j
b1110 l
b1110 5"
b1110 J"
b1110 n"
b11 k
b11 6"
b11 K"
b1100 h
b1100 7"
b1100 M"
b11 ]
b11 ="
b11 U"
b0 ^
b0 <"
b0 T"
b0 _
b0 ;"
b0 S"
b1 a
b1 9"
b1 P"
b1 p"
1+
1-
#3500
0+
0-
#4000
bx #"
bx B"
bx /"
bx $"
bx A"
xv
xz
xu
x{
xx
b1000 m
b1000 f"
b1000 "#
xy
xw
xt
bx ("
bx '"
bx 4"
x,"
1["
0O"
1s"
b0 g"
b0 z"
b10000 (
b10000 2
b10000 A#
b10000 P
b10000 $#
bx *"
bx000 3"
bx &"
bx 2"
bx ."
bx +"
b0 t"
b100000000000000000000000000000000 |"
b0 {"
b11111111111111111111111111111111 }"
b0 ]"
b0 r"
bx -"
0X
0Y
0[
b1 W
b1 i"
b1 *#
b11 T
b11 l"
b11 -#
b1100 U
b1100 k"
b1100 ,#
b1100 V
b1100 j"
b1100 +#
b1111000000000000000000000000000 8"
1i
b100 *
b100 .
b100 `
b100 :"
b100 L"
b0 l
b0 5"
b0 J"
b0 n"
b0 k
b0 6"
b0 K"
b0 h
b0 7"
b0 M"
b0 ]
b0 ="
b0 U"
b1111 a
b1111 9"
b1111 P"
b1111 p"
b1000 N
b1000 )"
b1000 )#
b1100 Q
b1100 &#
b1100 '#
b10000 %#
b100 s
bx 0
bx |
bx '
bx G
bx G#
b1000110000001110000000001100 F#
1+
1-
#4500
0+
0-
#5000
xo"
bx #
bx 5
bx D#
bx :
bx \"
bx w"
bx v"
bx ^"
bx N"
bx q"
bx _"
bx t"
bx |"
bx {"
bx }"
bx u"
bx ]"
bx r"
xy"
bx (
bx 2
bx A#
bx P
bx $#
x/
x["
xO"
bx $
bx 4
bx C#
bx &
bx 3
bx B#
bx o
bx h"
xs"
bx g"
bx z"
x~"
b0 <#
xn
bx x"
bx m
bx f"
bx "#
1@
b1100 >
b1100 ~
b1100 E"
b1100 ;#
b1000110000001110000000001100 1
b1000110000001110000000001100 6#
b1000110000001110000000001100 %
b1000110000001110000000001100 F
b1000110000001110000000001100 H#
b101 s
b10000 Q
b10000 &#
b10000 '#
b10100 %#
b1100 N
b1100 )"
b1100 )#
bx b
bx 0"
bx I"
bx R"
bx c
bx 1"
bx H"
bx Q"
bx 8"
xe
xg
xd
xf
xi
b1000 *
b1000 .
b1000 `
b1000 :"
b1000 L"
bx l
bx 5"
bx J"
bx n"
bx k
bx 6"
bx K"
bx h
bx 7"
bx M"
bx \
bx >"
bx V"
bx ]
bx ="
bx U"
bx ^
bx <"
bx T"
bx _
bx ;"
bx S"
bx a
bx 9"
bx P"
bx p"
b10 )
b10 M
b10 e"
b10 !#
1Z
b1111 W
b1111 i"
b1111 *#
b0 T
b0 l"
b0 -#
b0 U
b0 k"
b0 ,#
b0 V
b0 j"
b0 +#
0I
0J
0L
b1100 =
b1100 }
b1100 D"
b1100 8#
b1100 D
b1100 Z"
b1100 1#
b1100 5#
b1100 E
b1100 c"
b1100 0#
b1100 4#
b1 H
b1 d"
b1 /#
b1 7#
b11 C
b11 ""
b11 G"
b11 a"
b11 2#
b11 9#
1+
1-
#5500
0+
0-
#6000
x(#
x##
x;
0n
0@
1/
b0 >
b0 ~
b0 E"
b0 ;#
b1100 8
b1100 Y"
b1100 >#
b1100 9
b1100 b"
b1100 =#
b11 7
b11 X"
b11 ?#
1K
b0 =
b0 }
b0 D"
b0 8#
b0 D
b0 Z"
b0 1#
b0 5#
b0 E
b0 c"
b0 0#
b0 4#
b1111 H
b1111 d"
b1111 /#
b1111 7#
b0 C
b0 ""
b0 G"
b0 a"
b0 2#
b0 9#
xX
xY
xZ
bx W
bx i"
bx *#
bx S
bx m"
bx .#
bx T
bx l"
bx -#
bx U
bx k"
bx ,#
bx V
bx j"
bx +#
bx )
bx M
bx e"
bx !#
b1100 *
b1100 .
b1100 `
b1100 :"
b1100 L"
xj
b1100 !
b1100 <
b1100 r
b1100 %"
b1100 C"
b10000 N
b10000 )"
b10000 )#
xO
b10100 Q
b10100 &#
b10100 '#
bx %#
b110 s
bx F#
1+
1-
#6500
0+
0-
#7000
xn
0;
bx <#
x"
xA
x/
bx >
bx ~
bx E"
bx ;#
1(#
1##
bx 1
bx 6#
bx %
bx F
bx H#
b111 s
x?"
1[
b0 S
b0 m"
b0 .#
b0 T
b0 l"
b0 -#
xI
xJ
xK
1L
bx =
bx }
bx D"
bx 8#
bx D
bx Z"
bx 1#
bx 5#
bx E
bx c"
bx 0#
bx 4#
bx H
bx d"
bx /#
bx 7#
bx B
bx !"
bx F"
bx `"
bx 3#
bx :#
bx C
bx ""
bx G"
bx a"
bx 2#
bx 9#
b0 8
b0 Y"
b0 >#
b0 9
b0 b"
b0 =#
b0 7
b0 X"
b0 ?#
1p
1+
1-
#7500
0+
0-
#8000
xI#
1+
1-
